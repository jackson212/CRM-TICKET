{"ast":null,"code":"import _regeneratorRuntime from \"/home/jackson/Desktop/crm-ticket/crm-ticket/CrmFrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jackson/Desktop/crm-ticket/crm-ticket/CrmFrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { fetchTicketLoading, fetchTicketSuccess, fetchTicketFail\n// searchTickets,\n// fetchSingleTicketLoading,\n// fetchSingleTicketSuccess,\n// fetchSingleTicketFail,\n// replyTicketLoading,\n// replyTicketSuccess,\n// replyTicketFail,\n// closeTicketLoading,\n// closeTicketSuccess,\n// closeTicketFail,\n} from \"./ticketSlice\";\n\n// import {\n//   getAllTickets,\n//   getSingleTicket,\n//   updateReplyTicket,\n//   updateTicketStatusClosed,\n// } from \"../../api/ticketApi\";\n\nexport var fetchAllTickets = function fetchAllTickets() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchTicketLoading());\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('localhost:3001/v1/ticket', {\n                headers: {\n                  authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImphY2tzb25nZW9yZ2UxOTk4QGdtYWlsLmNvbSIsImlhdCI6MTY2NTczODYxMywiZXhwIjoxNjY5NjI2NjEzfQ.Nv8kTlZVTgzDf3HK5e5YpNlhG4W7i1GPh2_Aec4Zb7s'\n                }\n              });\n            case 4:\n              result = _context.sent;\n              dispatch(fetchTicketSuccess());\n              console.log(result);\n\n              // // result.data.result.length &&\n              //   dispatch(fetchTicketSuccess(result.data.result));\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(fetchTicketFail(_context.t0.message));\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\n// export const fetchAllTickets = () => async (dispatch) => {\n//   dispatch(fetchTicketLoading());\n//   try {\n//     const result = await getAllTickets();\n//     result.data.result.length &&\n//       dispatch(fetchTicketSuccess(result.data.result));\n//   } catch (error) {\n//     dispatch(fetchTicketFail(error.message));\n//   }\n// };\n\n// export const filterSerachTicket = (str) => (dispatch) => {\n//   dispatch(searchTickets(str));\n// };\n\n// //Actions for single ticket only\n// export const fetchSingleTicket = (_id) => async (dispatch) => {\n//   dispatch(fetchSingleTicketLoading());\n//   try {\n//     const result = await getSingleTicket(_id);\n//     dispatch(\n//       fetchSingleTicketSuccess(\n//         result.data.result.length && result.data.result[0]\n//       )\n//     );\n//   } catch (error) {\n//     dispatch(fetchSingleTicketFail(error.message));\n//   }\n// };\n\n// //Actions for replying on single ticket\n// export const replyOnTicket = (_id, msgObj) => async (dispatch) => {\n//   dispatch(replyTicketLoading());\n//   try {\n//     const result = await updateReplyTicket(_id, msgObj);\n//     console.log(result);\n//     if (result.status === \"error\") {\n//       return dispatch(replyTicketFail(result.message));\n//     }\n\n//     dispatch(fetchSingleTicket(_id));\n\n//     dispatch(replyTicketSuccess(result.message));\n//   } catch (error) {\n//     console.log(error.message);\n//     dispatch(replyTicketFail(error.message));\n//   }\n// };\n// //Actions for closing ticket\n// export const closeTicket = (_id) => async (dispatch) => {\n//   dispatch(closeTicketLoading());\n//   try {\n//     const result = await updateTicketStatusClosed(_id);\n//     if (result.status === \"error\") {\n//       return dispatch(closeTicketFail(result.message));\n//     }\n\n//     dispatch(fetchSingleTicket(_id));\n\n//     dispatch(closeTicketSuccess(\"Status Updated successfully\"));\n//   } catch (error) {\n//     console.log(error.message);\n//     dispatch(closeTicketFail(error.message));\n//   }\n// };","map":{"version":3,"names":["axios","fetchTicketLoading","fetchTicketSuccess","fetchTicketFail","fetchAllTickets","dispatch","get","headers","authorization","result","console","log","message"],"sources":["/home/jackson/Desktop/crm-ticket/crm-ticket/CrmFrontEnd/src/page/ticket-listing/TicketAction.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n    fetchTicketLoading,\n    fetchTicketSuccess,\n    fetchTicketFail,\n    // searchTickets,\n    // fetchSingleTicketLoading,\n    // fetchSingleTicketSuccess,\n    // fetchSingleTicketFail,\n    // replyTicketLoading,\n    // replyTicketSuccess,\n    // replyTicketFail,\n    // closeTicketLoading,\n    // closeTicketSuccess,\n    // closeTicketFail,\n  } from \"./ticketSlice\";\n  \n  // import {\n  //   getAllTickets,\n  //   getSingleTicket,\n  //   updateReplyTicket,\n  //   updateTicketStatusClosed,\n  // } from \"../../api/ticketApi\";\n  \n\n\n\n\n \n \n\n \n\n\n\n\n  export const fetchAllTickets = () => async (dispatch) => {\n    dispatch(fetchTicketLoading());\n    try {\n      // const result = await getAllTickets();\n     \n     \n     const result = await axios.get(\n                     \n      'localhost:3001/v1/ticket',\n      { headers:{\n\n        authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImphY2tzb25nZW9yZ2UxOTk4QGdtYWlsLmNvbSIsImlhdCI6MTY2NTczODYxMywiZXhwIjoxNjY5NjI2NjEzfQ.Nv8kTlZVTgzDf3HK5e5YpNlhG4W7i1GPh2_Aec4Zb7s'\n\n\n\n      }\n\n\n      }\n\n\n     )\n     dispatch(fetchTicketSuccess());\n       console.log(result)\n          \n\n     \n      // // result.data.result.length &&\n      //   dispatch(fetchTicketSuccess(result.data.result));\n\n\n\n\n    } catch (error) {\n      dispatch(fetchTicketFail(error.message));\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n  // export const fetchAllTickets = () => async (dispatch) => {\n  //   dispatch(fetchTicketLoading());\n  //   try {\n  //     const result = await getAllTickets();\n  //     result.data.result.length &&\n  //       dispatch(fetchTicketSuccess(result.data.result));\n  //   } catch (error) {\n  //     dispatch(fetchTicketFail(error.message));\n  //   }\n  // };\n  \n  // export const filterSerachTicket = (str) => (dispatch) => {\n  //   dispatch(searchTickets(str));\n  // };\n  \n  // //Actions for single ticket only\n  // export const fetchSingleTicket = (_id) => async (dispatch) => {\n  //   dispatch(fetchSingleTicketLoading());\n  //   try {\n  //     const result = await getSingleTicket(_id);\n  //     dispatch(\n  //       fetchSingleTicketSuccess(\n  //         result.data.result.length && result.data.result[0]\n  //       )\n  //     );\n  //   } catch (error) {\n  //     dispatch(fetchSingleTicketFail(error.message));\n  //   }\n  // };\n  \n  // //Actions for replying on single ticket\n  // export const replyOnTicket = (_id, msgObj) => async (dispatch) => {\n  //   dispatch(replyTicketLoading());\n  //   try {\n  //     const result = await updateReplyTicket(_id, msgObj);\n  //     console.log(result);\n  //     if (result.status === \"error\") {\n  //       return dispatch(replyTicketFail(result.message));\n  //     }\n  \n  //     dispatch(fetchSingleTicket(_id));\n  \n  //     dispatch(replyTicketSuccess(result.message));\n  //   } catch (error) {\n  //     console.log(error.message);\n  //     dispatch(replyTicketFail(error.message));\n  //   }\n  // };\n  // //Actions for closing ticket\n  // export const closeTicket = (_id) => async (dispatch) => {\n  //   dispatch(closeTicketLoading());\n  //   try {\n  //     const result = await updateTicketStatusClosed(_id);\n  //     if (result.status === \"error\") {\n  //       return dispatch(closeTicketFail(result.message));\n  //     }\n  \n  //     dispatch(fetchSingleTicket(_id));\n  \n  //     dispatch(closeTicketSuccess(\"Status Updated successfully\"));\n  //   } catch (error) {\n  //     console.log(error.message);\n  //     dispatch(closeTicketFail(error.message));\n  //   }\n  // };"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,kBAAkB,EAClBC,kBAAkB,EAClBC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,OACK,eAAe;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAcA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAe;EAAA;IAAA,oEAAS,iBAAOC,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA;cAClDA,QAAQ,CAACJ,kBAAkB,EAAE,CAAC;cAAC;cAAA;cAAA,OAKTD,KAAK,CAACM,GAAG,CAE7B,0BAA0B,EAC1B;gBAAEC,OAAO,EAAC;kBAERC,aAAa,EAAE;gBAIjB;cAGA,CAAC,CAGD;YAAA;cAfKC,MAAM;cAgBZJ,QAAQ,CAACH,kBAAkB,EAAE,CAAC;cAC5BQ,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;;cAIpB;cACA;cAAA;cAAA;YAAA;cAAA;cAAA;cAMAJ,QAAQ,CAACF,eAAe,CAAC,YAAMS,OAAO,CAAC,CAAC;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE5C;IAAA;MAAA;IAAA;EAAA;AAAA;;AAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}