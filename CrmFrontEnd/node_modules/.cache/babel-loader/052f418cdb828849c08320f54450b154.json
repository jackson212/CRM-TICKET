{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  searchTicketList: [],\n  selectedTicket: {},\n  jackons: {}\n};\nvar ticketListSlice = createSlice({\n  name: \"ticket\",\n  initialState: initialState,\n  reducers: {\n    fetchTicketLoading: function fetchTicketLoading(state) {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: function fetchTicketSuccess(state, action) {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: function fetchTicketFail(state, _ref) {\n      var payload = _ref.payload;\n      state.isLoading = false;\n      state.error = payload;\n    },\n    searchTickets: function searchTickets(state, _ref2) {\n      var payload = _ref2.payload;\n      state.searchTicketList = state.tickets.filter(function (row) {\n        if (!payload) return row;\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: function fetchSingleTicketLoading(state) {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: function fetchSingleTicketSuccess(state, _ref3) {\n      var payload = _ref3.payload;\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: function fetchSingleTicketFail(state, _ref4) {\n      var payload = _ref4.payload;\n      state.isLoading = false;\n      state.error = payload;\n    }\n    // replyTicketLoading: (state) => {\n    //   state.isLoading = true;\n    // },\n    // replyTicketSuccess: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = \"\";\n    //   state.replyMsg = payload;\n    // },\n    // replyTicketFail: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.replyTicketError = payload;\n    // },\n    // closeTicketLoading: (state) => {\n    //   state.isLoading = true;\n    // },\n    // closeTicketSuccess: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = \"\";\n    //   state.replyMsg = payload;\n    // },\n    // closeTicketFail: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = payload;\n    // },\n    // resetResponseMsg: (state) => {\n    //   state.isLoading = false;\n    //   state.replyTicketError = \"\";\n    //   state.replyMsg = \"\";\n    // },\n  }\n});\nvar reducer = ticketListSlice.reducer,\n  actions = ticketListSlice.actions;\nvar fetchTicketLoading = actions.fetchTicketLoading,\n  fetchTicketSuccess = actions.fetchTicketSuccess,\n  fetchTicketFail = actions.fetchTicketFail,\n  searchTickets = actions.searchTickets,\n  fetchSingleTicketFail = actions.fetchSingleTicketFail,\n  fetchSingleTicketLoading = actions.fetchSingleTicketLoading,\n  fetchSingleTicketSuccess = actions.fetchSingleTicketSuccess;\nexport { fetchTicketLoading, fetchTicketSuccess, fetchTicketFail, searchTickets, fetchSingleTicketFail, fetchSingleTicketLoading, fetchSingleTicketSuccess };\nexport default reducer;","map":{"version":3,"names":["createSlice","initialState","tickets","isLoading","error","searchTicketList","selectedTicket","jackons","ticketListSlice","name","reducers","fetchTicketLoading","state","fetchTicketSuccess","action","payload","fetchTicketFail","searchTickets","filter","row","subject","toLowerCase","includes","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","reducer","actions"],"sources":["/home/jackson/Desktop/crm-ticket/crm-ticket/CrmFrontEnd/src/page/ticket-listing/ticketSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  searchTicketList:[],\n  selectedTicket:{},\n  jackons:{}\n\n};\n\nconst ticketListSlice = createSlice({\n  name: \"ticket\",\n  initialState,\n  reducers: {\n    fetchTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: (state, action) => {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    }\n,    searchTickets: (state, { payload }) => {\n      state.searchTicketList = state.tickets.filter((row) => {\n        if (!payload) return row;\n\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: (state) => {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: (state, { payload }) => {\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    // replyTicketLoading: (state) => {\n    //   state.isLoading = true;\n    // },\n    // replyTicketSuccess: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = \"\";\n    //   state.replyMsg = payload;\n    // },\n    // replyTicketFail: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.replyTicketError = payload;\n    // },\n    // closeTicketLoading: (state) => {\n    //   state.isLoading = true;\n    // },\n    // closeTicketSuccess: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = \"\";\n    //   state.replyMsg = payload;\n    // },\n    // closeTicketFail: (state, { payload }) => {\n    //   state.isLoading = false;\n    //   state.error = payload;\n    // },\n    // resetResponseMsg: (state) => {\n    //   state.isLoading = false;\n    //   state.replyTicketError = \"\";\n    //   state.replyMsg = \"\";\n    // },\n  },\n});\n\nconst { reducer, actions } = ticketListSlice;\n\nexport const {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\nsearchTickets,\nfetchSingleTicketFail,\nfetchSingleTicketLoading,\nfetchSingleTicketSuccess,\n} = actions;\n\nexport default reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EAAE;EACXC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,EAAE;EACTC,gBAAgB,EAAC,EAAE;EACnBC,cAAc,EAAC,CAAC,CAAC;EACjBC,OAAO,EAAC,CAAC;AAEX,CAAC;AAED,IAAMC,eAAe,GAAGR,WAAW,CAAC;EAClCS,IAAI,EAAE,QAAQ;EACdR,YAAY,EAAZA,YAAY;EACZS,QAAQ,EAAE;IACRC,kBAAkB,EAAE,4BAACC,KAAK,EAAK;MAC7BA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC;IACDU,kBAAkB,EAAE,4BAACD,KAAK,EAAEE,MAAM,EAAK;MACrCF,KAAK,CAACV,OAAO,GAAGY,MAAM,CAACC,OAAO;MAC9BH,KAAK,CAACP,gBAAgB,GAAGS,MAAM,CAACC,OAAO;MACvCH,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC;IACDa,eAAe,EAAE,yBAACJ,KAAK,QAAkB;MAAA,IAAdG,OAAO,QAAPA,OAAO;MAChCH,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,KAAK,GAAGW,OAAO;IACvB,CAAC;IACAE,aAAa,EAAE,uBAACL,KAAK,SAAkB;MAAA,IAAdG,OAAO,SAAPA,OAAO;MAC/BH,KAAK,CAACP,gBAAgB,GAAGO,KAAK,CAACV,OAAO,CAACgB,MAAM,CAAC,UAACC,GAAG,EAAK;QACrD,IAAI,CAACJ,OAAO,EAAE,OAAOI,GAAG;QAExB,OAAOA,GAAG,CAACC,OAAO,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACP,OAAO,CAACM,WAAW,EAAE,CAAC;MAClE,CAAC,CAAC;IACJ,CAAC;IACDE,wBAAwB,EAAE,kCAACX,KAAK,EAAK;MACnCA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC;IACDqB,wBAAwB,EAAE,kCAACZ,KAAK,SAAkB;MAAA,IAAdG,OAAO,SAAPA,OAAO;MACzCH,KAAK,CAACN,cAAc,GAAGS,OAAO;MAC9BH,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,KAAK,GAAG,EAAE;IAClB,CAAC;IACDqB,qBAAqB,EAAE,+BAACb,KAAK,SAAkB;MAAA,IAAdG,OAAO,SAAPA,OAAO;MACtCH,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,KAAK,GAAGW,OAAO;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;AAAC,IAEKW,OAAO,GAAclB,eAAe,CAApCkB,OAAO;EAAEC,OAAO,GAAKnB,eAAe,CAA3BmB,OAAO;AAAA,IAGtBhB,kBAAkB,GAOhBgB,OAAO,CAPThB,kBAAkB;EAClBE,kBAAkB,GAMhBc,OAAO,CANTd,kBAAkB;EAClBG,eAAe,GAKbW,OAAO,CALTX,eAAe;EACjBC,aAAa,GAITU,OAAO,CAJXV,aAAa;EACbQ,qBAAqB,GAGjBE,OAAO,CAHXF,qBAAqB;EACrBF,wBAAwB,GAEpBI,OAAO,CAFXJ,wBAAwB;EACxBC,wBAAwB,GACpBG,OAAO,CADXH,wBAAwB;AAAA;AAGxB,eAAeE,OAAO"},"metadata":{},"sourceType":"module"}